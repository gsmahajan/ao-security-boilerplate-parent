FOR v in cloudseer_source_myaccess
LET identity = v.sAMAccountName
COLLECT logon = v.sAMAccountName, empId = v.employeeID, empNum = v.employeeNumber, emailAddress = v.mail, since = v.whenCreated, manager = SUBSTITUTE(SPLIT(v.manager, ",")[0], "CN=", ""), under = SUBSTITUTE(SPLIT(v.manager, ",")[1], "OU=", ""), firstName = SPLIT(v.mail, ".")[0], cinfo = [v.mobile, v.telephoneNumber], fullName = v.name, csId = MD5(v.logon), badgeMapping = (
        FOR b in cloudseer_source_badges_users_mappings
        FILTER UPPER(identity) == UPPER(b.UserID)
        RETURN b
    ), vpnInformation  = (
        FOR g IN cloudseer_source_vpns
        FILTER UPPER(identity) == UPPER(g.Identity)
        LET mac = g.Endpoint_ID
        COLLECT macd = g.Endpoint_ID, dev = g.Endpoint_Profile, 
        sessions = (FOR q in cloudseer_source_vpns FILTER UPPER(q.Endpoint_ID) == UPPER(mac) RETURN q._id) 
        WITH count INTO length
        RETURN DISTINCT { rank: 0, mac: macd, dev: dev, size: length, session: sessions }
    )
INSERT {
    csId: csId,
    logon : logon,
    empId : empId,
    empNum : empNum,
    emailAddress: emailAddress,
    since: since,
    reports_to: manager,
    fall_under: under,
    firstName: firstName,
    lastName: badgeMapping[0].Surname,
    displayName: fullName,
    laptops: (FOR mac in vpnInformation[*].mac FOR lp in cloudseer_laptops FILTER lp.mac == mac RETURN lp._id),
    badgeId: badgeMapping[0].BadgeId,
    contactInformation: {
        mobile: cinfo[0],
        telephone: cinfo[1]
    },
    activities:{
        vpn: vpnInformation,
        badge:  (
            FOR bg IN cloudseer_source_lenels
            FILTER bg.BadgeId == badgeMapping[0].BadgeId
            COLLECT place = bg.Panel, links = (FOR e in cloudseer_source_lenels FILTER e.BadgeId == bg.BadgeId AND e.Panel == bg.Panel RETURN e._id) WITH count into total_badges
            RETURN {
		    place: place,
		    size: total_badges,
		    links: links
	    })
    }
} INTO cloudseer_peoples