[{"value":"FOR l in cloudseer_source_lenels\nCOLLECT Event = l.Event WITH count into length\nINSERT {\n    type: Event,\n    occurances: length\n} INTO cloudseer_lenel_statuses","parameter":{},"name":"006-cloudseer_lenel_statuses"},{"value":"FOR l in cloudseer_source_lenels\nFOR p in cloudseer_peoples\nFILTER LIKE(l.Details, \"%\"+p.badgeId+\"%\")\nRETURN {\nEmpName: p.displayName,\nEmpId: p.empId,\nDate: l.Date,\nTime: l.Time,\nEvent: l.Event,\nDetails: l.Details,\nDevice: l.Device,\nPanel: l.Panel\n}","parameter":{},"name":"sanjays-explore-raw-lenel"},{"value":"FOR c IN cloudseer_source_vpns\nFOR p IN cloudseer_peoples\nFILTER UPPER(c.Identity) == UPPER(p.logon)\nRETURN DISTINCT {\nempId: p.empId,\nbadgeId: p.badgeId,\ndisplayName: p.displayName,\nLogged_At: c.Logged_At,\nRADIUS_Status: c.RADIUS_Status,\nIdentity: c.Identity,\nEndpoint_ID: c.Endpoint_ID,\nEndpoint_Profile: c.Endpoint_Profile,\nAuthorization_Rule: c.Authorization_Rule,\nServer: c.Server,\nNetwork_Device: c.Network_Device,\nDevice_Type: c.Device_Type,\nLocation: c.Location,\nNetwork_Device_IP: c.Network_Device_IP,\nDevice_Port: c.Device_Port,\nEvent: c.Event,\nService_Type: c.Service_Type,\nAuthentication_Protocol: c.Authentication_Protocol,\nCredential_Check: c.Credential_Check,\nFailure_Reason: c.Failure_Reason,\nMapLocation: c.MapLocation\n}\n","parameter":{},"name":"sanjay-vpn-extracts-17042018"},{"value":"FOR j in cloudseer_time_buckets\r\nFOR h in 0..23\r\n\tFILTER j.hour == h\r\n\tCOLLECT bucket = j.bucket, hour = j.hour WITH count into length\r\n\tINSERT  {\r\n\t\thour : hour,\r\n\t\tsize: length,\r\n\t\tbucket: bucket\r\n\t} INTO cloudseer_badging_total_stats_hourly","parameter":{},"name":"007-cloudseer_badging_total_stats_hourly"},{"value":"FOR j in cloudseer_time_buckets\nFOR h in 0..23\nFOR ev in cloudseer_lenel_statuses\n\tFILTER j.hour == h AND j.event.Event == ev.type\n\tCOLLECT  event = j.event.Event WITH count into length\n\tINSERT { \"activities\" : {\n\t    type: event,\n\t\tsize: length\n\t}\n\t} INTO cloudseer_badging_activities_per_status_pattern_stats_daily","parameter":{},"name":"008-cloudseer_badging_activities_per_status_pattern_stats_daily"},{"value":"FOR j in cloudseer_time_buckets\nFOR h in 0..23\nFOR ev in [ \"Access Granted\", \"Denied, Badge Not in Panel\", \"Invalid Access Level\", \"Invalid Badge\", \"Inactive Badge\" ]\n\tFILTER j.hour == h AND j.event.Event == ev\n\tCOLLECT  event = j.event.Event, hour = j.hour, bucket = j.bucket WITH count into length\n\tINSERT { \"activities\" : {\n\t    type: event,\n\t    hour: hour,\n\t    bucket: bucket,\n\t\tsize: length\n\t}\n\t} INTO cloudseer_badging_activities_per_status_pattern_stats_hourly","parameter":{},"name":"009-cloudseer_badging_activities_per_status_pattern_stats_hourly"},{"value":"FOR j in cloudseer_time_buckets\r\nFOR h in 0..23\r\nFOR ev in cloudseer_lenel_statuses\r\nFOR ed IN [ \"Entry\", \"Exit\", \"IN\", \"OUT\"]\r\n\tFILTER j.hour == h AND j.event.Event == ev.type AND CONTAINS(j.event.Device, ed)\r\n\tCOLLECT  event = j.event.Event, hour = j.hour, bucket = j.bucket, badgeActivity = ed WITH count into length\r\n\tINSERT { \"activities\" : {\r\n\t    type: event,\r\n\t    hour: hour,\r\n\t    bucket: bucket,\r\n\t    badge_activity: badgeActivity,\r\n\t\tsize: length\r\n\t}\r\n\t} INTO cloudseer_badging_entry_exit_stats_hourly","parameter":{},"name":"011-cloudseer_badging_entry_exit_stats_hourly"},{"value":"FOR j in cloudseer_time_buckets\r\nFOR h in 0..23\r\nFOR d in 1..31\r\nFOR ev in cloudseer_lenel_statuses\r\nFOR ed IN [ \"Entry\", \"Exit\", \"IN\", \"OUT\"]\r\n\tFILTER j.hour == h AND j.day == d AND j.event.Event == ev.type AND CONTAINS(j.event.Device, ed)\r\n\tCOLLECT  event = j.event.Event, device = ed, day = j.day, hour = j.hour, month = j.month WITH count into length\r\n\tINSERT { \"activities\" : {\r\n\t    type: event,\r\n\t    category: device,\r\n\t    size: length,\r\n\t    day: day,\r\n\t    hour:hour,\r\n\t    month:month\r\n\t}\r\n\t} INTO cloudseer_badging_stats_per_day_average","parameter":{},"name":"012-cloudseer_badging_stats_per_day_average"},{"value":"FOR h in 0..23\r\nCOLLECT hourgroup = h, sz = (FOR rw IN cloudseer_daywise_hourwise_stats_per_bucket FILTER rw.activities.hour == h RETURN rw.activities.size)\r\nINSERT {hour: hourgroup, all_count:SUM(sz), avg: FLOOR(AVERAGE(sz))} INTO cloudseer_daily_hourwise_total_badging","parameter":{},"name":"014-cloudseer_daily_hourwise_total_badging"},{"value":"FOR m in 1..12\r\nFOR d in 1..31\r\nFOR h in 0..23\r\nCOLLECT hourgroup = h, month = m, day = d, names = (FOR q in cloudseer_time_buckets FILTER q.hour == h AND q.month == m AND q.day == d COLLECT names = q.event.Details INTO groups RETURN DISTINCT UNIQUE(groups[*].q.event.Details))\r\nINSERT {hourgroup: hourgroup, month:month, day: day, persons: UNIQUE(names)} INTO cloudseer_daily_hourwise_total_persons","parameter":{},"name":"015-cloudseer_daily_hourwise_total_persons"},{"value":"FOR h in 0..23\r\nCOLLECT hourgroup = h, names = (FOR q in cloudseer_time_buckets FILTER q.hour == h COLLECT names = q.event.Details INTO groups RETURN DISTINCT UNIQUE(groups[*].q.event.Details))\r\nINSERT {hourgroup: hourgroup, persons: UNIQUE(names)} INTO cloudseer_alltime_hourwise_total_persons","parameter":{},"name":"016-cloudseer_alltime_hourwise_total_persons"},{"value":"FOR j in cloudseer_vpn_timebuckets\r\nCOLLECT hour = j.hour,  event = j.event.Event WITH count into length\r\nINSERT { \"activities\" : {\r\n\t    hour: hour,\r\n\t    type: event,\r\n\t    size: length\r\n    }\r\n} INTO cloudseer_stats_activities_vpn_statuses_per_hour","parameter":{},"name":"019-cloudseer_stats_activities_vpn_statuses_per_hour"},{"value":"FOR j in cloudseer_vpn_timebuckets\r\nCOLLECT hour = j.hour, identities = (FOR q in cloudseer_vpn_timebuckets FILTER q.hour == j.hour RETURN q.event.Identity)\r\nINSERT { \"activities\" : {\r\n\t    hour: hour,\r\n\t    size : length(identities),\r\n\t    users: identities\r\n\t}\r\n} INTO cloudseer_stats_activities_vpn_identities_per_hour\r\n","parameter":{},"name":"020-cloudseer_stats_activities_vpn_identities_per_hour"},{"value":"FOR j in cloudseer_vpn_timebuckets\r\nFOR h in 0..23\r\nFILTER  j.hour == h\r\nCOLLECT device = j.event.Network_Device, hour = j.hour WITH count INTO length\r\nINSERT  { \"activities\":{\r\n    device: device,\r\n    hour: hour,\r\n    size: length\r\n}\r\n} INTO cloudseer_stats_activities_vpn_nw_device_per_hour","parameter":{},"name":"021-cloudseer_stats_activities_vpn_nw_device_per_hour"},{"value":"FOR v in cloudseer_source_vpns\r\nCOLLECT hexmac= v.Endpoint_ID, profile= v.Endpoint_Profile\r\n\r\nINSERT {device: \"laptop\", profile: profile, \"model\": \"Dell 184X\", \"mac\": hexmac  } INTO cloudseer_laptops","parameter":{},"name":"002-cloudseer_laptops"},{"value":"FOR p in cloudseer_peoples\nFOR d in 1..31\nFOR h in 0..23\nCOLLECT name = p.displayName, badgeId = p.badgeId, userId = p.logon, csId = p._id, vpnsession = LENGTH(p.activities.vpn) == 0  ? [] :p.activities.vpn, badgesession = LENGTH(p.activities.badge) == 0 ? [] : p.activities.badge\nINSERT  {\n    name: name,\n    badge: badgeId,\n    userId: userId,\n    csId: csId,\n    vpnsize: (FOR q in cloudseer_vpn_timebuckets FOR j in vpnsession FOR v IN j.session FILTER q._id == v AND j.mac == q.event.Endpoint_ID COLLECT mac = j.mac, hour=q.hour, day=q.day, month = q.month WITH count into length RETURN { mac:mac, hour:hour, day:day, month:month, vpnsize: length}),\n    badgesize: (FOR b in cloudseer_time_buckets FOR h in badgesession FOR f IN h.links FILTER f == b._id COLLECT bhour= b.hour, bday= b.day, bmonth = b.month WITH count into blength RETURN { hour:bhour, day:bday, month:bmonth, badgesize: blength })\n} INTO cloudseer_identity_extractions","parameter":{},"name":"022-cloudseer_identity_extractions"},{"value":"FOR q in cloudseer_identity_extractions\r\nFOR r in q.badgesize\r\nCOLLECT name = q.name, id = q.userId, csId = q.csId, badge = q.badge, hour = r.hour, day = r.day, month = r.month, count = r.badgesize\r\nINSERT {name, id, csId, badge, hour, day, month, count} INTO cloudseer_vpn_identities_daywise_hourwise","parameter":{},"name":"023-cloudseer_vpn_identities_daywise_hourwise"},{"value":"FOR q in cloudseer_identity_extractions\r\nFOR r in q.badgesize\r\nCOLLECT name = q.name, id = q.userId, csId = q.csId, badge = q.badge, hour = r.hour, day = r.day, month = r.month, count = r.badgesize\r\nINSERT {name, id, csId, badge, hour, day, month, count} INTO cloudseer_badge_identities_daywise_hourwise","parameter":{},"name":"024-cloudseer_badge_identities_daywise_hourwise"},{"value":"FOR j in cloudseer_source_lenels\nCOLLECT aj = j, hour = DATE_HOUR(CONCAT(j.ISO_Format, \"Z\")), dw =DATE_DAY(CONCAT(j.ISO_Format, \"Z\")), time = CONCAT(j.ISO_Format,\"Z\"), dm = DATE_MONTH(CONCAT(j.ISO_Format, \"Z\")), wk = DATE_DAYOFWEEK(CONCAT(j.ISO_Format, \"Z\")), wkd = DATE_FORMAT(CONCAT(j.ISO_Format, \"Z\"), \"%www\"),wn = DATE_ISOWEEK(CONCAT(j.ISO_Format, \"Z\")) WITH COUNT INTO groups\nINSERT {\n    time: time,\n    hour : hour,\n    day: dw,\n    week: wk,\n    week_number: wn,\n    weekday: wkd,\n    month: dm,\n    bucket: (\n        FOR v in 1..4\n        COLLECT a = hour <= 4 ? 1: 0, b = hour > 4 && hour <=8 ? 1: 0, c = hour > 8 && hour <=12 ? 1: 0, d = hour > 12 && hour <=16 ? 1: 0, e = hour > 16 && hour <=20 ? 1 : 0, f = hour > 20 && hour <= 24 ? 1:0\n        RETURN {\n            a,\n            b,\n            c,\n            d,\n            e,\n            f\n        }\n    ), event: aj\n} INTO cloudseer_time_buckets","parameter":{},"name":"003-cloudseer_time_buckets_repository"},{"value":"FOR v in cloudseer_source_myaccess\r\nLET identity = v.sAMAccountName\r\nCOLLECT logon = v.sAMAccountName, empId = v.employeeID, empNum = v.employeeNumber, emailAddress = v.mail, since = v.whenCreated, manager = SUBSTITUTE(SPLIT(v.manager, \",\")[0], \"CN=\", \"\"), under = SUBSTITUTE(SPLIT(v.manager, \",\")[1], \"OU=\", \"\"), firstName = SPLIT(v.mail, \".\")[0], cinfo = [v.mobile, v.telephoneNumber], fullName = v.name, csId = MD5(v.logon), badgeMapping = (\r\n        FOR b in cloudseer_source_badges_users_mappings\r\n        FILTER UPPER(identity) == UPPER(b.UserID)\r\n        RETURN b\r\n    ), vpnInformation  = (\r\n        FOR g IN cloudseer_source_vpns\r\n        FILTER UPPER(identity) == UPPER(g.Identity)\r\n        LET mac = g.Endpoint_ID\r\n        COLLECT macd = g.Endpoint_ID, dev = g.Endpoint_Profile, \r\n        sessions = (FOR q in cloudseer_source_vpns FILTER UPPER(q.Endpoint_ID) == UPPER(mac) RETURN q._id) \r\n        WITH count INTO length\r\n        RETURN DISTINCT { rank: 0, mac: macd, dev: dev, size: length, session: sessions }\r\n    ), vpnTimedInformation  = (\r\n        FOR r IN cloudseer_vpn_timebuckets\r\n        FILTER UPPER(identity) == UPPER(r.event.Identity)\r\n        LET mac = r.event.Endpoint_ID\r\n        COLLECT macd = r.event.Endpoint_ID, dev = r.event.Endpoint_Profile, \r\n        sessions = (FOR q in cloudseer_vpn_timebuckets FILTER UPPER(q.event.Endpoint_ID) == UPPER(mac) RETURN DISTINCT q._id) \r\n        WITH count INTO length\r\n        RETURN DISTINCT { rank: 0, mac: macd, dev: dev, size: length, session: sessions }\r\n    )\r\nINSERT {\r\n    csId: csId,\r\n    logon : logon,\r\n    empId : empId,\r\n    empNum : empNum,\r\n    emailAddress: emailAddress,\r\n    since: since,\r\n    reports_to: manager,\r\n    fall_under: under,\r\n    firstName: firstName,\r\n    lastName: badgeMapping[0].Surname,\r\n    displayName: fullName,\r\n    laptops: (FOR mac in vpnInformation[*].mac FOR lp in cloudseer_laptops FILTER lp.mac == mac RETURN DISTINCT lp._id),\r\n    badgeId: badgeMapping[0].BadgeId,\r\n    contactInformation: {\r\n        mobile: cinfo[0],\r\n        telephone: cinfo[1]\r\n    },\r\n    activities:{\r\n        vpn: vpnTimedInformation,\r\n        badge:  (\r\n            FOR bg IN cloudseer_time_buckets\r\n            FILTER TO_NUMBER(bg.event.BadgeId) == badgeMapping[0].BadgeId\r\n            COLLECT place = bg.event.Panel, links = (FOR e in cloudseer_time_buckets FILTER e.event.BadgeId == bg.event.BadgeId AND e.event.Panel == bg.event.Panel RETURN e._id) WITH count into total_badges\r\n            RETURN {\r\n\t\t    place: place,\r\n\t\t    size: total_badges,\r\n\t\t    links: links\r\n\t    })\r\n    }\r\n} INTO cloudseer_peoples","parameter":{},"name":"005-cloudseer_peoples"},{"value":"FOR j in cloudseer_source_vpns\r\nCOLLECT aj = j, hour = DATE_HOUR(j.Logged_At), dw =DATE_DAY(j.Logged_At), time = j.Logged_At, dm = DATE_MONTH(j.Logged_At), wk = DATE_DAYOFWEEK(j.Logged_At), wkd = DATE_FORMAT(j.Logged_At, \"%www\"),wn = DATE_ISOWEEK(j.Logged_At) WITH COUNT INTO groups\r\nINSERT {\r\n    time: time,\r\n    hour : hour,\r\n    day: dw,\r\n    week: wk,\r\n    week_number: wn,\r\n    weekday: wkd,\r\n    month: dm,\r\n    bucket: (\r\n        FOR v in 1..1\r\n        COLLECT a = hour <= 4 ? 1: 0, b = hour > 4 && hour <=8 ? 1: 0, c = hour > 8 && hour <=12 ? 1: 0, d = hour > 12 && hour <=16 ? 1: 0, e = hour > 16 && hour <=20 ? 1 : 0, f = hour > 20 && hour <= 24 ? 1:0\r\n        RETURN {\r\n            a,\r\n            b,\r\n            c,\r\n            d,\r\n            e,\r\n            f\r\n        }\r\n    ), event: aj\r\n} INTO cloudseer_vpn_timebuckets","parameter":{},"name":"004-cloudseer_vpn_timebuckets"},{"value":"FOR j in cloudseer_time_buckets\r\nFOR h in 0..23\r\nFOR ev in [ \"Access Granted\", \"Denied, Badge Not in Panel\", \"Invalid Access Level\", \"Invalid Badge\", \"Inactive Badge\" ]\r\nFOR device in [\r\n  \"609-4-01 New Lane 2 Exit -CR\",\r\n  \"610-2-01 Center Entry Lane\",\r\n  \"613-1-01 BT TRNSTLE IN\",\r\n  \"609-4-00 New Lane 1 Exit -CR\",\r\n  \"613-4-00 SERVICE OUT -CR\",\r\n  \"610-3-00 East Entry Lane\",\r\n  \"610-4-01 Handicap Exit Lane\",\r\n  \"613-2-00 BT TRNSTLE OUT\",\r\n  \"609-3-01 New Lane 2 Entry -CR\",\r\n  \"609-3-00 New Lane 1 Entry -CR\",\r\n  \"610-2-00 Center Exit Lane\",\r\n  \"613-4-01 SERVICE IN -CR\",\r\n  \"610-1-01 West Exit Lane\",\r\n  \"610-3-01 East Exit Lane\",\r\n  \"610-4-00 Handicap Entry Lane\",\r\n  \"610-1-00 West Entry Lane -CR\"\r\n]\r\n\tFILTER j.hour == h AND j.event.Event == ev AND j.event.Device == device\r\n\tCOLLECT  event = j.event.Event, dev = j.event.Device, hour = j.hour, bucket = j.bucket WITH count into length\r\n\tINSERT { \"activities\" : {\r\n\t    type: event,\r\n\t    lane: dev,\r\n\t    hour: hour,\r\n\t    bucket: bucket,\r\n\t\tsize: length\r\n\t}\r\n\t} INTO cloudseer_badging_readers_stats_hourly","parameter":{},"name":"010-cloudseer_badging_readers_stats_hourly"},{"value":"FOR laptop in cloudseer_laptops UPDATE laptop WITH { vpn_event_attributes : (FOR people in cloudseer_peoples FOR vpnd IN people.activities.vpn FILTER laptop.mac == vpnd.mac RETURN { session: people.activities.vpn[0].session, user: people.displayName, email: people.emailAddress, logon : people.logon, since: people.since, csId: people._id })} INTO cloudseer_laptops OPTIONS { mergeObjects: true }","parameter":{},"name":"025-cloudseer_laptops_updates"},{"value":"FOR j in cloudseer_time_buckets\r\nFOR h in 0..23\r\nFOR d in 1..31\r\nFOR m in 1..12\r\n\tFILTER j.hour == h AND d == j.day AND h == j.hour AND m == j.month\r\n\tCOLLECT  event = j.event.Event, hour = j.hour, bucket = j.bucket, dw = j.day, dm = j.month WITH count into length\r\n\tINSERT { \"activities\" : {\r\n\t    type: event,\r\n\t    day: dw,\r\n\t    hour: hour,\r\n\t    month: dm,\r\n\t    bucket: bucket,\r\n\t    size: length\r\n\t}\r\n} INTO cloudseer_daywise_hourwise_stats_per_bucket","parameter":{},"name":"013-cloudseer_daywise_hourwise_stats_per_bucket"},{"value":"FOR l in cloudseer_time_buckets\nFOR h in 0..23\nFOR d in 1..31\nFOR m in 1..12\nLET badgeInfo = l.event.BadgeId\nFILTER l.hour == h AND l.day == d AND l.month == m\nCOLLECT hour = l.hour, day = l.day, month = l.month, panel = l.event.Panel, peoples=(\n        FOR p in cloudseer_peoples\n        FILTER p.badgeId == TO_NUMBER(badgeInfo) AND LENGTH(p.activities.badge) != 0 AND p.activities.badge.session.place == panel\n        RETURN p._id\n        )\nINSERT {\n    panel: panel,\n    hour : hour,\n    day: day,\n    month : month,\n    count: length(peoples),\n    peoples: peoples\n} INTO cloudseer_badge_readers","parameter":{},"name":"017-cloudseer_badge_readers"},{"value":"FOR a in cloudseer_laptops\n  FOR p in cloudseer_peoples\n   FOR mac in p.activities.vpn[*].mac\n   FILTER mac == a.mac\nINSERT {_from: p._id, _to: a._id } INTO cloudseer_owns","parameter":{},"name":"026-cloudseer_owns_edge"},{"value":"FOR s in cloudseer_vpn_servers\n  FOR p in cloudseer_badging_stations\n   FILTER s.situated_at == p.station\nINSERT {_from: s._id, _to: p._id} INTO cloudseer_are_in","parameter":{},"name":"027-cloudseer_are_in_edge"},{"value":"FOR s in cloudseer_laptops\n  FOR p in cloudseer_vpn_timebuckets\n   FILTER s.mac == p.event.Endpoint_ID\nINSERT {_from: s._id, _to: p._id, type: \"vpn_creates\" } INTO cloudseer_creates","parameter":{},"name":"028-cloudseer_creates_edge"},{"value":"FOR v in cloudseer_source_vpns\nFILTER v.Server != null\nCOLLECT Network_Device_IP = v.Network_Device_IP, Network_Device = v.Network_Device INTO groups\nINSERT {Network_Device_IP, Network_Device} INTO cloudseer_vpn_network_device","parameter":{},"name":"001-cloudseer_vpn_network_device"},{"value":"FOR l in cloudseer_time_buckets\nFOR h in 0..23\nFOR d in 1..31\nFOR m in 1..12\nLET badgeInfo = l.event.BadgeId\nFILTER l.hour == h AND l.day == d AND l.month == m\nCOLLECT hour = l.hour, day = l.day, month = l.month, panel = l.event.Panel, peoples=(\n        FOR p in cloudseer_peoples\n        FILTER p.badgeId == TO_NUMBER(badgeInfo) AND LENGTH(p.activities.badge) != 0 AND p.activities.badge.session.place == panel\n        RETURN p._id\n        )\nINSERT {\n    panel: panel,\n    hour : hour,\n    day: day,\n    month : month,\n    count: length(peoples),\n    peoples: peoples\n} INTO cloudseer_badge_reader_event_trans","parameter":{},"name":"029-cloudseer_badge_reader_event_trans"},{"value":"FOR l in cloudseer_time_buckets\r\nFOR panel in (FOR q in cloudseer_time_buckets RETURN DISTINCT q.event.Panel)\r\nFILTER UPPER(l.event.Panel) == UPPER(panel)\r\nCOLLECT pn = panel, peoples = (FOR p in cloudseer_peoples\r\n        FILTER p.activities.badge != NULL\r\n        FOR ws IN (FOR place in p.activities.badge RETURN place)\r\n        FILTER UPPER(pn) == UPPER(ws.place)\r\n        COLLECT displayName = p.displayName, empId = p.empId, badge= p.badgeId, since = p.since, csId = p._id, sessions = ws.links\r\n        RETURN { displayName, badge, since, empId, csId, sessions }\r\n        )\r\nINSERT {\r\n    panel: pn,\r\n    size: LENGTH(peoples),\r\n    badge_event_attributes: peoples\r\n} INTO cloudseer_badge_panels","parameter":{},"name":"030-cloudseer_badge_panels"},{"value":"FOR person in cloudseer_peoples UPDATE person WITH { user_badgecount_alltime: SUM(person.activities.badge[*].size)} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"018-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { user_badgecount_by_hour: (FOR n in 0..23 FOR q in cloudseer_time_buckets FILTER n == q.hour AND TO_NUMBER(q.event.BadgeId) == person.badgeId COLLECT bucket_hour = n WITH count INTO length RETURN {bucket_hour:bucket_hour, count:length})} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"031-cloudseer_peoples"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { user_badgecount_by_day: (FOR n in 1..31 FOR q in cloudseer_time_buckets FILTER n == q.day AND TO_NUMBER(q.event.BadgeId) == person.badgeId COLLECT bucket_day = n WITH count INTO length RETURN {bucket_day:bucket_day, count:length})} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"034-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { user_vpncount_by_day: (FOR q in cloudseer_vpn_timebuckets FOR n in 1..31 FILTER q.day == n AND UPPER(q.event.Identity) == UPPER(person.logon) COLLECT bucket_day = n WITH count INTO length RETURN {bucket_day:bucket_day, count:length})} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"037-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { user_vpncount_by_hour: (FOR q in cloudseer_vpn_timebuckets FOR n in 0..23 FILTER n == q.hour AND UPPER(q.event.Identity) == UPPER(person.logon) COLLECT bucket_hour = n WITH count INTO length RETURN {bucket_hour:bucket_hour, count:length})} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"040-cloudseer_peoples_updates"},{"value":"FOR person in cloudseer_peoples UPDATE person WITH { user_vpncount_alltime: SUM(person.activities.vpn[*].size)} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"041-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { user_badgecount_by_weekday: (FOR q in cloudseer_time_buckets FOR n in 1..7 FILTER n == q.week AND TO_NUMBER(q.event.BadgeId) == person.badgeId COLLECT bucket_week = q.weekday WITH count INTO length RETURN {bucket_week:bucket_week, count:length})} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"046-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { user_vpncount_by_weekday: (FOR q in cloudseer_vpn_timebuckets FOR n in 1..7 FILTER q.week == n AND UPPER(q.event.Identity) == UPPER(person.logon) COLLECT bucket_week = q.weekday WITH count INTO length RETURN {bucket_week:bucket_week, count:length})} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"047-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { user_badgecount_by_week_of_year: (FOR q in cloudseer_time_buckets FOR n in 1..53 FILTER q.week_number == n AND TO_NUMBER(q.event.BadgeId) == person.badgeId COLLECT bucket_week_of_year = n WITH count INTO length RETURN {bucket_week_of_year:bucket_week_of_year, count:length})} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"048-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { user_vpncount_by_week_of_year: (FOR q in cloudseer_vpn_timebuckets FOR n in 1..53 FILTER q.week_number == n AND UPPER(q.event.Identity) == UPPER(person.logon) COLLECT bucket_week_of_year = n WITH count INTO length RETURN {bucket_week_of_year:bucket_week_of_year, count:length})} IN cloudseer_peoples  OPTIONS { mergeObjects: true }","parameter":{},"name":"049-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { since: ( LET months = [ \"January\", \"Feberuary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"Sepetember\", \"October\", \"November\", \"December\" ] FOR e in cloudseer_source_myaccess FILTER e.sAMAccountName == person.logon COLLECT since = e.whenCreated RETURN { value: concat (months[TO_NUMBER(SUBSTRING(since, 4,2))-1],\", \",SUBSTRING(since,0,4))})[0].value} INTO cloudseer_peoples","parameter":{},"name":"050-cloudseer_people_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { reports_to_id: (FOR e in cloudseer_peoples FILTER e.displayName == person.reports_to RETURN { value : e._id })[0].value } INTO cloudseer_peoples","parameter":{},"name":"051-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { manages: (FOR e in cloudseer_peoples FILTER e.reports_to_id == person._id RETURN { name:e.displayName, link : e._id }) } INTO cloudseer_peoples","parameter":{},"name":"052-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { profile: \"development\", contactInformation: {mobile: \"mobileValue\", telephone: \"telephoneValue\"}, emailAddress: \"nobody@nowhere.com\" } INTO cloudseer_peoples\r\n","parameter":{},"name":"053-cloudseer_peoples_updates-profile"},{"value":"FOR person IN cloudseer_peoples DONT UPDATE person WITH { avatar: (FOR g in cloudseer_source_gender FILTER g.firstname == person.firstName RETURN g.gender)[0] } INTO cloudseer_peoples","parameter":{},"name":"054-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { lanes: (FOR l in (FOR q in person.activities.badge[*].links FOR g in DOCUMENT(q) COLLECT lane = g.event.Device with count into length RETURN { lane:lane, count:length }) SORT l.count DESC,  l.lane RETURN l) } INTO cloudseer_peoples","parameter":{},"name":"055-cloudseer_peoples_updates"},{"value":"FOR person IN cloudseer_peoples UPDATE person WITH { vpn_network_devices: (FOR l in (FOR q in person.activities.vpn[*].session FOR g in DOCUMENT(q) COLLECT nd = g.event.Network_Device, loc = g.event.Location with count into length RETURN { device_id: (FOR o in cloudseer_vpn_network_device FILTER o.Network_Device == nd RETURN o._id)[0], name:nd, location: loc, count:length }) SORT l.count DESC,  l.network_device, l.location RETURN l) } INTO cloudseer_peoples\r\n","parameter":{},"name":"056-cloudseer_peoples_updates"},{"value":"FOR s in cloudseer_laptops\n  FOR p in cloudseer_vpn_timebuckets\n   FILTER s.mac == p.event.Endpoint_ID\nINSERT {_from: s._id, _to: p._id, type: \"vpn_creates\" } INTO cloudseer_creates","parameter":{},"name":"057-cloudseer_edge_creates"}]